name: Publish Tauri App With Updater

on:
  push:
    branches:
      - release
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.settings.platform }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install System Dependencies (Ubuntu only)
        if: matrix.settings.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        working-directory: .

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Cache Rust Target Folder
        uses: swatinem/rust-cache@v2
        with:
          # Adjusted path for workspaces to match the project directory structure
          workspaces: 'src-tauri'

      - name: Install Frontend Dependencies
        run: npm install
        working-directory: example26

      - name: Build Tauri Application
        run: npm run build
        working-directory: example26

      - name: Setup Tauri Environment Variables
        run: |
          echo "TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "TAURI_KEY_PASSWORD=${{ secrets.TAURI_KEY_PASSWORD }}" >> $GITHUB_ENV

      - name: Sign Artifacts
        run: |
          tauri signer sign --key $TAURI_PRIVATE_KEY --password $TAURI_KEY_PASSWORD ./src-tauri/target/release/bundle/
        working-directory: example26


      - name: Set up keychain (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Creating and configuring keychain"
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security list-keychains -s build.keychain
        shell: bash

      - name: Import Certificate (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Decoding certificate"
          echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > certificate.p12
          echo "Importing certificate"
          security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          echo "Listing keychains"
          security list-keychains
          echo "Finding identity"
          security find-identity -p codesigning
          echo "Setting key partition list with password"
          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          echo "Finding identity after setting partition list"
          security find-identity -p codesigning
        shell: bash
        env:
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Create GitHub Release
        uses: tauri-apps/tauri-action@v0
        with:
          tagName: v__VERSION__
          releaseName: v__VERSION__
          releaseDraft: true
          prerelease: false
          draft: true
          includeReleaseName: true
          releaseBody: 'See the assets to download this version and install.'
          releaseBodyPath: ''
          releaseAssets: './src-tauri/target/release/bundle/**'
          target: ${{ matrix.settings.platform }}
          projectPath: example26 # Setting projectPath to match your project directory
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
